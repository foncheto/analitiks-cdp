generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
  interactions    Interaction[]
  contacts        Contact[]
  leads           Lead[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  clientId     Int      // Foreign key to associate project with a client

  tasks        Task[]
  projectTeams ProjectTeam[]

  client       Client   @relation(fields: [clientId], references: [id]) // Relates Project to Client
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

model Client {
  id           Int        @id @default(autoincrement())
  companyName  String
  industry     String?
  email        String     
  phone        String?
  address      String?
  region       String?
  position     Float[]    // Position: array of latitude and longitude
  contacts     Contact[]
  sales        Sale[]
  leads        Lead[]
  interactions Interaction[]
  projects     Project[]
}

model Contact {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String?
  userId   Int?
  clientId Int

  user   User?  @relation(fields: [userId], references: [userId])
  client Client @relation(fields: [clientId], references: [id])

  Interaction Interaction[]
}

model Sale {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  description String?
  clientId    Int

  client Client @relation(fields: [clientId], references: [id])
}

model Lead {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  status      String?   // e.g., "new", "contacted", "qualified", "converted", "unqualified"
  source      String?  // e.g., "website", "referral", "ad campaign"
  notes       String?
  company     String?
  clientId    Int?     // Optional association with an existing client
  assignedTo  Int?     // User ID of the salesperson managing the lead

  client      Client?  @relation(fields: [clientId], references: [id])
  user        User?    @relation(fields: [assignedTo], references: [userId])
}

model Interaction {
  id           Int      @id @default(autoincrement())
  type         String   // e.g., "chat", "email", "call"
  date         DateTime
  notes        String?
  userId       Int?
  clientId     Int?
  contactId    Int?
  email        String?
  phoneNumber  String?

  user    User?    @relation(fields: [userId], references: [userId])
  client  Client?  @relation(fields: [clientId], references: [id])
  contact Contact? @relation(fields: [contactId], references: [id])
}
